{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>Use this template to set up your pdm project using: <pre><code>pdm init https://github.com/eckelsjd/pdm-template-uq.git\n</code></pre></p> <p>THE REST OF THIS README will be populated with your project information. PLEASE IGNORE. You can delete this text in your own readme file. Note that you will also have to manually fill in all broken links with your own information (such as Github repo links, PyPI package links, etc.)</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install normally with: <pre><code>pip install pdm-template-uq\n</code></pre> If you are using pdm in your own project, then you can use: <pre><code>cd &lt;your-pdm-project&gt;\npdm add pdm-template-uq\n</code></pre> You can also quickly set up a development environment with: <pre><code># After forking this project on Github...\ngit clone https://github.com/&lt;your-username&gt;/pdm-template-uq.git\ncd pdm-template-uq\npdm install  # reads pdm.lock and sets up an identical venv\n</code></pre></p>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code>import pdm-template-uq\n\npdm-template-uq.do_something()\n\nprint('Wow!')\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>See the contribution guidelines.</p>"},{"location":"#citations","title":"Citations","text":"<p>Include any additional references for your project.</p> <p><sup><sub>Made with the UQ pdm template.</sub></sup></p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#contributing-to-pdm-template-uq","title":"Contributing to <code>pdm-template-uq</code>","text":"<p>You might be here if you want to:</p> <ul> <li>Report a bug</li> <li>Discuss the current state of the code</li> <li>Submit a fix</li> <li>Propose a new feature</li> <li>Write unit tests</li> <li>Add to the documentation.</li> </ul> <p>We use Github to host code and documentation, to track issues and feature requests, and to accept pull requests.</p>"},{"location":"CONTRIBUTING/#submitting-pull-requests","title":"Submitting pull requests","text":"<p>Pull requests are the best way to propose changes to the codebase (bug fixes, new features, docs, etc.)</p> <ol> <li>Fork the repo and create your branch from <code>main</code>. </li> <li>If you are adding a feature or making major changes, first create the issue in Github.</li> <li>If you've added code that should be tested, add to <code>/tests</code>. </li> <li>If you've made major changes, update the <code>/docs</code>. </li> <li>Ensure the test suite passes (<code>pdm run test</code>).</li> <li>Follow Conventional commits guidelines when adding a commit message.</li> <li>Issue the pull request!</li> </ol> <p>We strongly recommend using pdm to set up your development environment. An example contribution workflow is shown here:</p> <pre><code># Fork the repo on Github\ngit clone https://github.com/&lt;your-user-name&gt;/pdm-template-uq.git\ncd pdm-template-uq\npdm install\ngit checkout -b &lt;your-branch-name&gt;\n\n# Make local changes\n\npdm run test  # make sure tests pass\ngit add -A\ngit commit -m \"fix: Adding a bugfix or new feature\"\ngit push -u origin &lt;your-branch-name&gt;\n\n# Go to Github and \"Compare &amp; Pull Request\" on your fork\n# For your PR to be merged:\n  # squash all your commits on your branch (interactively in an IDE most likely)\n  # rebase to the top of origin/main to include new changes from others\n\ngit fetch\ngit rebase -i main your-branch  # for example\n\n# Resolve any conflicts\n# Your history now looks something like this:\n#              o your-branch\n#             /\n# ---o---o---o main\n\n# You can delete the branch and fork when your PR has been merged!\n</code></pre> <p>You can also find a good tutorial here.</p>"},{"location":"CONTRIBUTING/#report-bugs-using-issues","title":"Report bugs using issues","text":"<p>Open a new issue and describe your problem using the template. Provide screenshots where possible and example log files. Add labels to help categorize and describe your issue.</p>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under its GNU GPLv3 License.</p>"},{"location":"CONTRIBUTING/#releases","title":"Releases","text":"<p>The package version is tracked at <code>pdm-template-uq.__version__</code>. You should not edit this value. The version will be  increased on a case-by-case basis and released depending on the changes being merged.</p>"},{"location":"how-to-guides/","title":"How-to Guides","text":"<p>Tutorials are quick, one-off, mostly self-explanatory snippets to get your new users up and running with your library. If you have any recipe-like, step-by-step guides on how to do more involved tasks with your library, this page would be the best place to put those. This would be good for users who have decided they want to use your library (thanks to your easy, well-written tutorials), but they need help learning how to do a more complicated task. </p> <p>Each section here should clearly mark what the goal is, and the guides themselves should be recipe-like with enumeration of steps and short explanations of what (read: not why or how) you are accomplishing.</p>"},{"location":"how-to-guides/#how-to-do-something","title":"How to do something","text":"<p>We are going to try to do something with our code.</p> <ol> <li>Import the library into your code: <code>import pdm-template-uq</code></li> <li>Do something with the code: <code>pdm-template-uq.do_something()</code></li> <li>That's it!</li> </ol>"},{"location":"theory/","title":"Home","text":"<p>Here would be a good place to go into all the good theory of how your code works. This would be more focused on explanation rather than a tutorial, step-by-step style. You should include all the important equations and also link to any relevant journal articles or online resources.</p> <p>The interested reader here probably already uses your code and knows their way around the API (thanks to your  beautifully written API reference). So you don't need to even mention the code. You just need to explain the  algorithms and mathematical concepts underlying your code; that's what your reader is most likely on this page for.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>On the tutorials page, you want to show some basic usage of your code. Show the simplest, \"lowest-barrier-to-entry\" things that a new user can do with your code. The point is to get them up and running and for them to quickly test if your project is going to have the things they need. For each section, your title should explain the purpose/goal of the tutorial, and the tutorial itself should mostly be simple, short, and readable code.</p> <p>You should not include long, lengthy descriptions of how the code works or provide every intricate option for the primary functions and methods. These are better reserved for the API reference.</p>"},{"location":"tutorials/#code-snippet-example","title":"Code snippet example","text":"<p>Here is an example of how to cut and paste from your source code directly into the documentation. example.py</p>"},{"location":"reference/overview/","title":"Overview","text":"<p>The API reference section of your documentation is a good place to include thorough, informational details on how to use your code. A good way to do this is to include high-level diagrams on this page, and then have a separate page for  each core module of your package. You can let <code>mkdocstrings</code> do most of the work for you on the module pages by pulling in all your excellent docstrings directly from your code and formatting it nicely on your mkdocs webpage. Here is a link on how to do this.</p> <p>Here is an example of displaying all the docstrings from the <code>example.py</code> module:</p> <p>An example of snippets to include in documentation directly from source code.</p> <p>And just for fun, here is an example UML class diagram using <code>Mermaid</code>.</p> <pre><code>classDiagram\n    class MyClass {\n      +list[OtherClass] components\n      +int another_property\n      +my_method()\n    }\n    class OtherClass {\n      +Array indices\n      +activate_index(idx)\n    }\n    MyClass o-- \"1..n\" OtherClass</code></pre>"},{"location":"reference/overview/#pdm_template_uq.example.my_example","title":"<code>my_example(a=0)</code>","text":"<p>An example docstring in sphinx format.</p> <p>Note</p> <p>Admonitions will be displayed using the triple ! format when rendered via mkdocs. See mkdocs-material. You can also show latex equations using the normal \\(y=f(x)\\) format. Most other markdown syntax can be used directly in the docstring and will render properly when pulled into the documentation using <code>mkdocstrings</code>.</p> PARAMETER  DESCRIPTION <code>a</code> <p>this is an example sphinx documentation format for a parameter. Use <code>a: int</code> type hints to render the type of the parameter through <code>mkdocstrings</code>.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> RETURNS DESCRIPTION <code>None</code> <p><code>None</code>, this function does not have a return value</p> Source code in <code>src/pdm_template_uq/example.py</code> <pre><code>def my_example(a: int = 0) -&gt; None:\n    \"\"\"An example docstring in sphinx format.\n\n    !!! Note\n        Admonitions will be displayed using the triple ! format when rendered via mkdocs. See\n        [mkdocs-material](https://squidfunk.github.io/mkdocs-material/reference/admonitions/). You can also show latex\n        equations using the normal $y=f(x)$ format. Most other markdown syntax can be used directly in the docstring\n        and will render properly when pulled into the documentation using `mkdocstrings`.\n\n    :param a: this is an example sphinx documentation format for a parameter. Use `a: int` type hints to render\n              the type of the parameter through `mkdocstrings`.\n    :returns: `None`, this function does not have a return value\n    \"\"\"\n    # All the lines below will be cut and paste into a doc code block that references the \"example_name\" code snippet\n    # --8&lt;-- [start:example_name]\n    import numpy as np\n    import matplotlib.pyplot as plt\n\n    x = np.linspace(0, 1, 100)\n    y = np.sin(x)\n    fig, ax = plt.subplots()\n    ax.plot(x, y, '-k')\n    plt.show()\n</code></pre>"}]}